<<<<<<< HEAD
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Ru.GameSchool.DataLayer.Repository
{
    public partial class Comment
    {
        #region Primitive Properties
    
        public virtual int CommentId
        {
            get;
            set;
        }
    
        public virtual int LevelMaterialId
        {
            get { return _levelMaterialId; }
            set
            {
                if (_levelMaterialId != value)
                {
                    if (LevelMaterial != null && LevelMaterial.LevelMaterialId != value)
                    {
                        LevelMaterial = null;
                    }
                    _levelMaterialId = value;
                }
            }
        }
        private int _levelMaterialId;
    
        public virtual string Comment1
        {
            get;
            set;
        }
    
        public virtual int UserInfoId
        {
            get { return _userInfoId; }
            set
            {
                if (_userInfoId != value)
                {
                    if (UserInfo != null && UserInfo.UserInfoId != value)
                    {
                        UserInfo = null;
                    }
                    _userInfoId = value;
                }
            }
        }
        private int _userInfoId;
    
        public virtual bool Deleted
        {
            get;
            set;
        }
    
        public virtual string DeletedByUser
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreateDateTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual LevelMaterial LevelMaterial
        {
            get { return _levelMaterial; }
            set
            {
                if (!ReferenceEquals(_levelMaterial, value))
                {
                    var previousValue = _levelMaterial;
                    _levelMaterial = value;
                    FixupLevelMaterial(previousValue);
                }
            }
        }
        private LevelMaterial _levelMaterial;
    
        public virtual UserInfo UserInfo
        {
            get { return _userInfo; }
            set
            {
                if (!ReferenceEquals(_userInfo, value))
                {
                    var previousValue = _userInfo;
                    _userInfo = value;
                    FixupUserInfo(previousValue);
                }
            }
        }
        private UserInfo _userInfo;
    
        public virtual ICollection<CommentLike> CommentLikes
        {
            get
            {
                if (_commentLikes == null)
                {
                    var newCollection = new FixupCollection<CommentLike>();
                    newCollection.CollectionChanged += FixupCommentLikes;
                    _commentLikes = newCollection;
                }
                return _commentLikes;
            }
            set
            {
                if (!ReferenceEquals(_commentLikes, value))
                {
                    var previousValue = _commentLikes as FixupCollection<CommentLike>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommentLikes;
                    }
                    _commentLikes = value;
                    var newValue = value as FixupCollection<CommentLike>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommentLikes;
                    }
                }
            }
        }
        private ICollection<CommentLike> _commentLikes;

        #endregion
        #region Association Fixup
    
        private void FixupLevelMaterial(LevelMaterial previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (LevelMaterial != null)
            {
                if (!LevelMaterial.Comments.Contains(this))
                {
                    LevelMaterial.Comments.Add(this);
                }
                if (LevelMaterialId != LevelMaterial.LevelMaterialId)
                {
                    LevelMaterialId = LevelMaterial.LevelMaterialId;
                }
            }
        }
    
        private void FixupUserInfo(UserInfo previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (UserInfo != null)
            {
                if (!UserInfo.Comments.Contains(this))
                {
                    UserInfo.Comments.Add(this);
                }
                if (UserInfoId != UserInfo.UserInfoId)
                {
                    UserInfoId = UserInfo.UserInfoId;
                }
            }
        }
    
        private void FixupCommentLikes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CommentLike item in e.NewItems)
                {
                    item.Comment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommentLike item in e.OldItems)
                {
                    if (ReferenceEquals(item.Comment, this))
                    {
                        item.Comment = null;
                    }
                }
            }
        }

        #endregion
    }
}
=======
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Ru.GameSchool.DataLayer.Repository
{
    public partial class Comment
    {
        #region Primitive Properties
    
        public virtual int CommentId
        {
            get;
            set;
        }
    
        public virtual int LevelMaterialId
        {
            get { return _levelMaterialId; }
            set
            {
                if (_levelMaterialId != value)
                {
                    if (LevelMaterial != null && LevelMaterial.LevelMaterialId != value)
                    {
                        LevelMaterial = null;
                    }
                    _levelMaterialId = value;
                }
            }
        }
        private int _levelMaterialId;
    
        public virtual string Comment1
        {
            get;
            set;
        }
    
        public virtual int UserInfoId
        {
            get { return _userInfoId; }
            set
            {
                if (_userInfoId != value)
                {
                    if (UserInfo != null && UserInfo.UserInfoId != value)
                    {
                        UserInfo = null;
                    }
                    _userInfoId = value;
                }
            }
        }
        private int _userInfoId;
    
        public virtual bool Deleted
        {
            get;
            set;
        }
    
        public virtual string DeletedByUser
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreateDateTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual LevelMaterial LevelMaterial
        {
            get { return _levelMaterial; }
            set
            {
                if (!ReferenceEquals(_levelMaterial, value))
                {
                    var previousValue = _levelMaterial;
                    _levelMaterial = value;
                    FixupLevelMaterial(previousValue);
                }
            }
        }
        private LevelMaterial _levelMaterial;
    
        public virtual UserInfo UserInfo
        {
            get { return _userInfo; }
            set
            {
                if (!ReferenceEquals(_userInfo, value))
                {
                    var previousValue = _userInfo;
                    _userInfo = value;
                    FixupUserInfo(previousValue);
                }
            }
        }
        private UserInfo _userInfo;
    
        public virtual ICollection<CommentLike> CommentLikes
        {
            get
            {
                if (_commentLikes == null)
                {
                    var newCollection = new FixupCollection<CommentLike>();
                    newCollection.CollectionChanged += FixupCommentLikes;
                    _commentLikes = newCollection;
                }
                return _commentLikes;
            }
            set
            {
                if (!ReferenceEquals(_commentLikes, value))
                {
                    var previousValue = _commentLikes as FixupCollection<CommentLike>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommentLikes;
                    }
                    _commentLikes = value;
                    var newValue = value as FixupCollection<CommentLike>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommentLikes;
                    }
                }
            }
        }
        private ICollection<CommentLike> _commentLikes;

        #endregion
        #region Association Fixup
    
        private void FixupLevelMaterial(LevelMaterial previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (LevelMaterial != null)
            {
                if (!LevelMaterial.Comments.Contains(this))
                {
                    LevelMaterial.Comments.Add(this);
                }
                if (LevelMaterialId != LevelMaterial.LevelMaterialId)
                {
                    LevelMaterialId = LevelMaterial.LevelMaterialId;
                }
            }
        }
    
        private void FixupUserInfo(UserInfo previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (UserInfo != null)
            {
                if (!UserInfo.Comments.Contains(this))
                {
                    UserInfo.Comments.Add(this);
                }
                if (UserInfoId != UserInfo.UserInfoId)
                {
                    UserInfoId = UserInfo.UserInfoId;
                }
            }
        }
    
        private void FixupCommentLikes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CommentLike item in e.NewItems)
                {
                    item.Comment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommentLike item in e.OldItems)
                {
                    if (ReferenceEquals(item.Comment, this))
                    {
                        item.Comment = null;
                    }
                }
            }
        }

        #endregion
    }
}
>>>>>>> f68ab16306b927e09139dd6646f2a6cbec6060a5
