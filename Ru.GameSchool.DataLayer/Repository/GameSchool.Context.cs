//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace Ru.GameSchool.DataLayer.Repository
{
    public partial class GameSchoolEntities : ObjectContext, IGameSchoolEntities
    {
        public const string ConnectionString = "name=GameSchoolEntities";
        public const string ContainerName = "GameSchoolEntities";
    
        #region Constructors
    
        public GameSchoolEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public GameSchoolEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public GameSchoolEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<Comment> Comments
        {
            get { return _comments  ?? (_comments = CreateObjectSet<Comment>("Comments")); }
        }
        private ObjectSet<Comment> _comments;
    
        public IObjectSet<CommentLike> CommentLikes
        {
            get { return _commentLikes  ?? (_commentLikes = CreateObjectSet<CommentLike>("CommentLikes")); }
        }
        private ObjectSet<CommentLike> _commentLikes;
    
        public IObjectSet<ContentType> ContentTypes
        {
            get { return _contentTypes  ?? (_contentTypes = CreateObjectSet<ContentType>("ContentTypes")); }
        }
        private ObjectSet<ContentType> _contentTypes;
    
        public IObjectSet<Course> Courses
        {
            get { return _courses  ?? (_courses = CreateObjectSet<Course>("Courses")); }
        }
        private ObjectSet<Course> _courses;
    
        public IObjectSet<CourseGrade> CourseGrades
        {
            get { return _courseGrades  ?? (_courseGrades = CreateObjectSet<CourseGrade>("CourseGrades")); }
        }
        private ObjectSet<CourseGrade> _courseGrades;
    
        public IObjectSet<Department> Departments
        {
            get { return _departments  ?? (_departments = CreateObjectSet<Department>("Departments")); }
        }
        private ObjectSet<Department> _departments;
    
        public IObjectSet<Level> Levels
        {
            get { return _levels  ?? (_levels = CreateObjectSet<Level>("Levels")); }
        }
        private ObjectSet<Level> _levels;
    
        public IObjectSet<LevelExamAnswer> LevelExamAnswers
        {
            get { return _levelExamAnswers  ?? (_levelExamAnswers = CreateObjectSet<LevelExamAnswer>("LevelExamAnswers")); }
        }
        private ObjectSet<LevelExamAnswer> _levelExamAnswers;
    
        public IObjectSet<LevelExamQuestion> LevelExamQuestions
        {
            get { return _levelExamQuestions  ?? (_levelExamQuestions = CreateObjectSet<LevelExamQuestion>("LevelExamQuestions")); }
        }
        private ObjectSet<LevelExamQuestion> _levelExamQuestions;
    
        public IObjectSet<LevelExamResult> LevelExamResults
        {
            get { return _levelExamResults  ?? (_levelExamResults = CreateObjectSet<LevelExamResult>("LevelExamResults")); }
        }
        private ObjectSet<LevelExamResult> _levelExamResults;
    
        public IObjectSet<LevelMaterial> LevelMaterials
        {
            get { return _levelMaterials  ?? (_levelMaterials = CreateObjectSet<LevelMaterial>("LevelMaterials")); }
        }
        private ObjectSet<LevelMaterial> _levelMaterials;
    
        public IObjectSet<Notification> Notifications
        {
            get { return _notifications  ?? (_notifications = CreateObjectSet<Notification>("Notifications")); }
        }
        private ObjectSet<Notification> _notifications;
    
        public IObjectSet<Point> Points
        {
            get { return _points  ?? (_points = CreateObjectSet<Point>("Points")); }
        }
        private ObjectSet<Point> _points;
    
        public IObjectSet<Status> Status
        {
            get { return _status  ?? (_status = CreateObjectSet<Status>("Status")); }
        }
        private ObjectSet<Status> _status;
    
        public IObjectSet<UserInfo> UserInfoes
        {
            get { return _userInfoes  ?? (_userInfoes = CreateObjectSet<UserInfo>("UserInfoes")); }
        }
        private ObjectSet<UserInfo> _userInfoes;
    
        public IObjectSet<UserType> UserTypes
        {
            get { return _userTypes  ?? (_userTypes = CreateObjectSet<UserType>("UserTypes")); }
        }
        private ObjectSet<UserType> _userTypes;
    
        public IObjectSet<UserLog> UserLogs
        {
            get { return _userLogs  ?? (_userLogs = CreateObjectSet<UserLog>("UserLogs")); }
        }
        private ObjectSet<UserLog> _userLogs;
    
        public IObjectSet<LevelExam> LevelExams
        {
            get { return _levelExams  ?? (_levelExams = CreateObjectSet<LevelExam>("LevelExams")); }
        }
        private ObjectSet<LevelExam> _levelExams;
    
        public IObjectSet<Announcement> Announcements
        {
            get { return _announcements  ?? (_announcements = CreateObjectSet<Announcement>("Announcements")); }
        }
        private ObjectSet<Announcement> _announcements;
    
        public IObjectSet<LevelProject> LevelProjects
        {
            get { return _levelProjects  ?? (_levelProjects = CreateObjectSet<LevelProject>("LevelProjects")); }
        }
        private ObjectSet<LevelProject> _levelProjects;
    
        public IObjectSet<LevelProjectResult> LevelProjectResults
        {
            get { return _levelProjectResults  ?? (_levelProjectResults = CreateObjectSet<LevelProjectResult>("LevelProjectResults")); }
        }
        private ObjectSet<LevelProjectResult> _levelProjectResults;

        #endregion
        #region Function Imports
        public ObjectResult<LevelProject> GetAllUserLevelProjects(Nullable<int> userInfoId)
        {
    
            ObjectParameter userInfoIdParameter;
    
            if (userInfoId.HasValue)
            {
                userInfoIdParameter = new ObjectParameter("userInfoId", userInfoId);
            }
            else
            {
                userInfoIdParameter = new ObjectParameter("userInfoId", typeof(int));
            }
            return base.ExecuteFunction<LevelProject>("GetAllUserLevelProjects", userInfoIdParameter);
        }

        #endregion
    }
}
