//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Ru.GameSchool.DataLayer.Repository
{
    public partial class Course
    {
        #region Primitive Properties
    
        public virtual int CourseId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string Identifier
        {
            get;
            set;
        }
    
        public virtual System.DateTime Start
        {
            get;
            set;
        }
    
        public virtual System.DateTime Stop
        {
            get;
            set;
        }
    
        public virtual int CreditAmount
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreateDateTime
        {
            get;
            set;
        }
    
        public virtual int DepartmentId
        {
            get { return _departmentId; }
            set
            {
                if (_departmentId != value)
                {
                    if (Department != null && Department.DepartmentId != value)
                    {
                        Department = null;
                    }
                    _departmentId = value;
                }
            }
        }
        private int _departmentId;

        #endregion
        #region Navigation Properties
    
        public virtual Department Department
        {
            get { return _department; }
            set
            {
                if (!ReferenceEquals(_department, value))
                {
                    var previousValue = _department;
                    _department = value;
                    FixupDepartment(previousValue);
                }
            }
        }
        private Department _department;
    
        public virtual ICollection<CourseGrade> CourseGrades
        {
            get
            {
                if (_courseGrades == null)
                {
                    var newCollection = new FixupCollection<CourseGrade>();
                    newCollection.CollectionChanged += FixupCourseGrades;
                    _courseGrades = newCollection;
                }
                return _courseGrades;
            }
            set
            {
                if (!ReferenceEquals(_courseGrades, value))
                {
                    var previousValue = _courseGrades as FixupCollection<CourseGrade>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCourseGrades;
                    }
                    _courseGrades = value;
                    var newValue = value as FixupCollection<CourseGrade>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCourseGrades;
                    }
                }
            }
        }
        private ICollection<CourseGrade> _courseGrades;
    
        public virtual ICollection<Level> Levels
        {
            get
            {
                if (_levels == null)
                {
                    var newCollection = new FixupCollection<Level>();
                    newCollection.CollectionChanged += FixupLevels;
                    _levels = newCollection;
                }
                return _levels;
            }
            set
            {
                if (!ReferenceEquals(_levels, value))
                {
                    var previousValue = _levels as FixupCollection<Level>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLevels;
                    }
                    _levels = value;
                    var newValue = value as FixupCollection<Level>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLevels;
                    }
                }
            }
        }
        private ICollection<Level> _levels;
    
        public virtual ICollection<Point> Points
        {
            get
            {
                if (_points == null)
                {
                    var newCollection = new FixupCollection<Point>();
                    newCollection.CollectionChanged += FixupPoints;
                    _points = newCollection;
                }
                return _points;
            }
            set
            {
                if (!ReferenceEquals(_points, value))
                {
                    var previousValue = _points as FixupCollection<Point>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPoints;
                    }
                    _points = value;
                    var newValue = value as FixupCollection<Point>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPoints;
                    }
                }
            }
        }
        private ICollection<Point> _points;
    
        public virtual ICollection<UserInfo> UserInfoes
        {
            get
            {
                if (_userInfoes == null)
                {
                    var newCollection = new FixupCollection<UserInfo>();
                    newCollection.CollectionChanged += FixupUserInfoes;
                    _userInfoes = newCollection;
                }
                return _userInfoes;
            }
            set
            {
                if (!ReferenceEquals(_userInfoes, value))
                {
                    var previousValue = _userInfoes as FixupCollection<UserInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserInfoes;
                    }
                    _userInfoes = value;
                    var newValue = value as FixupCollection<UserInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserInfoes;
                    }
                }
            }
        }
        private ICollection<UserInfo> _userInfoes;

        #endregion
        #region Association Fixup
    
        private void FixupDepartment(Department previousValue)
        {
            if (previousValue != null && previousValue.Courses.Contains(this))
            {
                previousValue.Courses.Remove(this);
            }
    
            if (Department != null)
            {
                if (!Department.Courses.Contains(this))
                {
                    Department.Courses.Add(this);
                }
                if (DepartmentId != Department.DepartmentId)
                {
                    DepartmentId = Department.DepartmentId;
                }
            }
        }
    
        private void FixupCourseGrades(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CourseGrade item in e.NewItems)
                {
                    item.Course = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourseGrade item in e.OldItems)
                {
                    if (ReferenceEquals(item.Course, this))
                    {
                        item.Course = null;
                    }
                }
            }
        }
    
        private void FixupLevels(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Level item in e.NewItems)
                {
                    item.Course = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Level item in e.OldItems)
                {
                    if (ReferenceEquals(item.Course, this))
                    {
                        item.Course = null;
                    }
                }
            }
        }
    
        private void FixupPoints(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Point item in e.NewItems)
                {
                    item.Course = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Point item in e.OldItems)
                {
                    if (ReferenceEquals(item.Course, this))
                    {
                        item.Course = null;
                    }
                }
            }
        }
    
        private void FixupUserInfoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserInfo item in e.NewItems)
                {
                    if (!item.Courses.Contains(this))
                    {
                        item.Courses.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserInfo item in e.OldItems)
                {
                    if (item.Courses.Contains(this))
                    {
                        item.Courses.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
