@model Ru.GameSchool.DataLayer.Repository.LevelMaterial

        <div class="control-group">
            @Html.LabelFor(m => m.Title, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(m => m.Title, new { @class="input-xlarge", rel="popover" })
                <span class="help-inline">@Html.ValidationMessageFor(m => m.Title)</span>
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(m => m.LevelId, new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(m => m.LevelId, new SelectList(ViewBag.LevelCount, "Value", "Text"))
                <span class="help-inline">@Html.ValidationMessageFor(m => m.LevelId)</span>
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(m => m.ContentTypeId, new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(m => m.ContentTypeId, new SelectList(ViewBag.ContentTypes, "ContentTypeId", "Name"))
                <span class="help-inline">@Html.ValidationMessageFor(m => m.ContentTypeId)</span>
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(m => m.File, new { @class = "control-label" })
            <div class="controls">
                <input type="file" name="File"/>
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(m => m.Description, new { @class = "control-label", @for="textarea" })
            <div class="controls">
                @Html.EditorFor(m => m.Description, new { @class="input-xlarge", rel="popover", rows="3" })
            </div>
        </div>